/*
 * Copyright (c) 2017 Alex de Kruijff <alex.de.kruijff@MazarineBlue.org>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package org.mazarineblue.runners.swingrunner.screens.main;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import static java.util.Arrays.stream;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import org.mazarineblue.executors.ExecutorFactory;
import org.mazarineblue.fs.FileSystem;
import org.mazarineblue.plugins.FeedService;
import org.mazarineblue.runners.swingrunner.ExceptionHandler;
import org.mazarineblue.runners.swingrunner.FileSelector;
import org.mazarineblue.runners.swingrunner.config.Config;
import org.mazarineblue.runners.swingrunner.exceptions.NoFileSelectedException;
import org.mazarineblue.runners.swingrunner.exceptions.NoSheetSelectedException;
import org.mazarineblue.runners.swingrunner.screens.about.AboutDialog;
import org.mazarineblue.runners.swingrunner.screens.about.AboutDialogBuilder;
import org.mazarineblue.runners.swingrunner.screens.about.GraphicalTextImageFetcher;
import org.mazarineblue.runners.swingrunner.screens.about.ImageFetcher;
import org.mazarineblue.runners.swingrunner.screens.about.URLImageFetcher;
import org.mazarineblue.runners.swingrunner.util.ExceptionReporter;
import org.mazarineblue.runners.swingrunner.util.LoggerExceptionReporter;

public class MainFrame
        extends javax.swing.JFrame {

    private static final ExceptionReporter LOGGER = new LoggerExceptionReporter();
    private static final long serialVersionUID = 1L;

    private final transient FileSystem fs;
    private final transient Config config;
    private final transient FileSelector selector;
    private final transient ExceptionHandler exceptionHandler;
    private final transient ExecutorFactory feedExecutorFactory;

    public MainFrame(MainFrameBuilder builder) {
        builder.verify();
        fs = builder.getFileSystem();
        config = builder.getConfig();
        selector = builder.getFileSelector();
        exceptionHandler = builder.getExceptionHandler();
        feedExecutorFactory = builder.getFeedExecutorFactory();
        initComponents();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JButton executeButton = new javax.swing.JButton();
        javax.swing.JButton selectFileButton = new javax.swing.JButton();
        fileComboBox = new javax.swing.JComboBox<>();
        sheetComboBox = new javax.swing.JComboBox<>();
        javax.swing.JLabel fileLabel = new javax.swing.JLabel();
        javax.swing.JLabel sheetLabel = new javax.swing.JLabel();
        javax.swing.JMenuBar jMenuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu jFileMenu = new javax.swing.JMenu();
        javax.swing.JMenu jEditMenu = new javax.swing.JMenu();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MazarineBlue");
        setName("mainFrame"); // NOI18N

        executeButton.setMnemonic('x');
        executeButton.setText("Execute");
        executeButton.setName("executeButton"); // NOI18N
        executeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeButtonActionPerformed(evt);
            }
        });

        selectFileButton.setMnemonic('s');
        selectFileButton.setText("Select file");
        selectFileButton.setName("selectFileButton"); // NOI18N
        selectFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFileButtonActionPerformed(evt);
            }
        });

        fileComboBox.setModel(getFileModel());
        fileComboBox.setName("fileComboBox"); // NOI18N
        fileComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileComboBoxActionPerformed(evt);
            }
        });

        sheetComboBox.setModel(getSheetModel());
        sheetComboBox.setName("sheetComboBox"); // NOI18N
        sheetComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sheetComboBoxActionPerformed(evt);
            }
        });

        fileLabel.setDisplayedMnemonic('f');
        fileLabel.setLabelFor(fileComboBox);
        fileLabel.setText("File");

        sheetLabel.setDisplayedMnemonic('h');
        sheetLabel.setLabelFor(sheetComboBox);
        sheetLabel.setText("Sheet");

        jFileMenu.setText("File");
        jMenuBar.add(jFileMenu);

        jEditMenu.setText("Edit");
        jMenuBar.add(jEditMenu);

        helpMenu.setText("Help");

        aboutMenuItem.setText("About");
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        jMenuBar.add(helpMenu);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(executeButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(sheetLabel)
                            .addComponent(fileLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(fileComboBox, 0, 205, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(selectFileButton))
                            .addComponent(sheetComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectFileButton)
                    .addComponent(fileComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sheetComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sheetLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(executeButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private ComboBoxModel<File> getFileModel() {
        try {
            return new DefaultComboBoxModel<>(config.getRecentFiles());
        } catch (RuntimeException | IOException ex) {
            exceptionHandler.exception(ex);
            return new DefaultComboBoxModel<>();
        }
    }

    private ComboBoxModel<String> getSheetModel() {
        try {
            File[] files = config.getRecentFiles();
            if (files == null || files.length == 0)
                return new DefaultComboBoxModel<>();
            return new DefaultComboBoxModel<>(FeedService.getSheetNames(fs, files[0]));
        } catch (RuntimeException | IOException ex) {
            exceptionHandler.exception(ex);
            return new DefaultComboBoxModel<>();
        }
    }

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        JDialog dialog = new AboutDialog(new AboutDialogBuilder(this)
                .setImageFetcher(getLogoFetcher(new File("logo.png")))
                .setResourceBundle("MazarineBlue"));
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private ImageFetcher getLogoFetcher(File file) {
        String path = file.getPath();
        URL url = getClass().getClassLoader().getResource(path);
        GraphicalTextImageFetcher backup = new GraphicalTextImageFetcher(150, 150);
        backup.addGraphicalMessage(new GraphicalMessageImpl("Image IO", 25, 65));
        backup.addGraphicalMessage(new GraphicalMessageImpl("Error", 25, 90));
        return new URLImageFetcher(url, backup, LOGGER);
    }

    private void fileComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileComboBoxActionPerformed
        File file = (File) fileComboBox.getSelectedItem();
        if (file != null)
            process(file);
    }//GEN-LAST:event_fileComboBoxActionPerformed

    private void selectFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFileButtonActionPerformed
        selector.waitForUserInput();
        File file = selector.getSelectedFile();
        if (file != null)
            process(file);
    }//GEN-LAST:event_selectFileButtonActionPerformed

    private void process(File file) {
        insertFile(file);
        replaceSheets(FeedService.getSheetNames(fs, file));
        config.writeToRecentFile(getRecentFiles());
    }

    private File[] getRecentFiles() {
        File[] file = new File[fileComboBox.getItemCount()];
        for (int i = 0; i < file.length; ++i)
            file[i] = fileComboBox.getItemAt(i);
        return file;
    }

    private void insertFile(File file) {
        fileComboBox.removeItem(file);
        fileComboBox.insertItemAt(file, 0);
        fileComboBox.setSelectedItem(file);
    }

    private void replaceSheets(String[] sheets) {
        sheetComboBox.removeAllItems();
        stream(sheets).forEach(sheetComboBox::addItem);
    }

    private void sheetComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sheetComboBoxActionPerformed
        // This comes into play when we need to listen to the action taken by the user.
    }//GEN-LAST:event_sheetComboBoxActionPerformed

    private void executeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeButtonActionPerformed
        File file = getSelectedFile();
        String sheet = getSelectedSheet();
        feedExecutorFactory.create().execute(file, sheet);
    }//GEN-LAST:event_executeButtonActionPerformed

    private File getSelectedFile() {
        File file = (File) fileComboBox.getSelectedItem();
        if (file != null)
            return file;
        throw new NoFileSelectedException();
    }

    private String getSelectedSheet() {
        String sheet = (String) sheetComboBox.getSelectedItem();
        if (sheet != null)
            return sheet;
        throw new NoSheetSelectedException();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<File> fileComboBox;
    private javax.swing.JComboBox<String> sheetComboBox;
    // End of variables declaration//GEN-END:variables
}
