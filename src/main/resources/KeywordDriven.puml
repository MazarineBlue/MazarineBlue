@startuml
annotation org.mazarineblue.eventbus.EventHandler
interface org.mazarineblue.eventbus.Event {
    +boolean isConsumed()
}
interface org.mazarineblue.eventbus.EventService {
    +void publish(E event)
    +boolean subscribe(Class eventType, Filter<E> filter, Subscriber<E> subscriber)
    +boolean unsubscribe(Class eventType, Filter<E> filter, Subscriber<E> subscriber)
}
interface org.mazarineblue.eventbus.Filter {
    +boolean apply(E event)
}
interface org.mazarineblue.eventbus.Subscriber {
    +eventHandler(E event)
}
abstract class org.mazarineblue.eventbus.AbstractEvent
abstract org.mazarineblue.eventbus.ReflectionSubscriber
class org.mazarineblue.eventbus.Entry {
    -Class eventType
}
class org.mazarineblue.eventbus.SimpleEventService {
    -Class eventType
}

org.mazarineblue.eventbus.Event <|-- org.mazarineblue.eventbus.AbstractEvent
org.mazarineblue.eventbus.EventService <|-- org.mazarineblue.eventbus.SimpleEventService
org.mazarineblue.eventbus.SimpleEventService o--> "*" org.mazarineblue.eventbus.Entry
org.mazarineblue.eventbus.Entry o--> "1" org.mazarineblue.eventbus.Filter
org.mazarineblue.eventbus.Entry o--> "1" org.mazarineblue.eventbus.Subscriber
org.mazarineblue.eventbus.Subscriber <|.. org.mazarineblue.eventbus.ReflectionSubscriber
org.mazarineblue.eventbus.ReflectionSubscriber .left.> org.mazarineblue.eventbus.EventHandler

interface org.mazarineblue.eventdriven.Chain {
    +int countLinks()
    +void addLink(Link link)
    +void addLink(Link link, Link after)
    +void removeLink(Link link)
}
interface org.mazarineblue.eventdriven.Feed {
    +boolean hasNext()
    +Event next()
    +reset()
}
interface org.mazarineblue.eventdriven.Interpreter {
    +execute(Feed feed)
}
interface org.mazarineblue.eventdriven.InterpreterFactory {
    {static} +InterpreterFactory getDefaultFactory()
    +Interpreter create()
}
interface org.mazarineblue.eventdriven.Invoker {
    +int countLinks()
    +void addLink(Link link)
    +void addLink(Link link, Link after)
    +void removeLink(Link link)
    +void publish(Event event)
}
abstract class org.mazarineblue.eventdriven.InvokerEvent {
    ~setInvoker(Invoker invoker)
    #Invoker invoker()
}
abstract org.mazarineblue.eventdriven.Link

org.mazarineblue.eventdriven.Chain <|.. org.mazarineblue.eventdriven.InterpreterFactory
org.mazarineblue.eventdriven.Chain <|.. org.mazarineblue.eventdriven.Interpreter
org.mazarineblue.eventdriven.InterpreterFactory <|.. org.mazarineblue.eventdriven.InterpreterFactoryImpl
org.mazarineblue.eventdriven.Interpreter <|.. org.mazarineblue.eventdriven.InterpreterImpl
org.mazarineblue.eventdriven.InterpreterFactoryImpl .right.> org.mazarineblue.eventdriven.InterpreterImpl
org.mazarineblue.eventdriven.InterpreterFactoryImpl --> "1" org.mazarineblue.eventdriven.ChainImpl
org.mazarineblue.eventdriven.InterpreterImpl --> "1" org.mazarineblue.eventdriven.ChainImpl
org.mazarineblue.eventdriven.InterpreterImpl ..> org.mazarineblue.eventdriven.Feed
org.mazarineblue.eventdriven.ChainImpl ..|> org.mazarineblue.eventdriven.Invoker
org.mazarineblue.eventdriven.ChainImpl --> "*" org.mazarineblue.eventdriven.Link
org.mazarineblue.eventdriven.Feed ..> org.mazarineblue.eventdriven.InvokerEvent
org.mazarineblue.eventdriven.InvokerEvent -right-> "1" org.mazarineblue.eventdriven.Invoker
org.mazarineblue.eventbus.AbstractEvent <|-- org.mazarineblue.eventdriven.InvokerEvent

class org.mazarineblue.eventbus.link.EventBusLink {
    +void eventHandler(AddSubscriberInvokerEvent event)
    +void eventHandler(RemoveSubscriberInvokerEvent event)
}
abstract class org.mazarineblue.eventbus.link.SubscriberEvent {
    -Class eventType;
    -Filter<E> filter;
    -Subscriber<E> subscriber;
}

org.mazarineblue.eventdriven.Link <|-- org.mazarineblue.eventbus.link.EventBusLink
org.mazarineblue.eventbus.link.EventBusLink --> "1" org.mazarineblue.eventbus.EventService
org.mazarineblue.eventbus.AbstractEvent <|--- org.mazarineblue.eventbus.link.SubscriberEvent
org.mazarineblue.eventbus.link.SubscriberEvent -up-> "1" org.mazarineblue.eventbus.Filter
org.mazarineblue.eventbus.link.SubscriberEvent -up-> "1" org.mazarineblue.eventbus.Subscriber

abstract org.mazarineblue.keyworddriven.Library {
}
class org.mazarineblue.keyworddriven.InstructionLine {
    -Object[] parameters
}
class org.mazarineblue.keyworddriven.Path {
    -String namespace
    -String keyword
}
class org.mazarineblue.keyworddriven.LibraryRegistry {
    +void countLibrary(CountLibrariesEvent event)
    +void addLibrary(AddLibraryEvent event)
    +void removeLibrary(RemoveLibraryEvent event)
    +void validateInstruction(ValidateInstructionLineEvent event)
    +void executeInstruction(ExecuteInstructionLineEvent event)
}
class org.mazarineblue.keyworddriven.Library
abstract org.mazarineblue.keyworddriven.KeywordDrivenEvent

org.mazarineblue.eventbus.ReflectionSubscriber <|-- org.mazarineblue.keyworddriven.LibraryRegistry
org.mazarineblue.eventbus.ReflectionSubscriber <|-- org.mazarineblue.keyworddriven.Library

org.mazarineblue.keyworddriven.LibraryRegistry o-right-> "*" org.mazarineblue.keyworddriven.Library
org.mazarineblue.keyworddriven.Library *-right-> "*" org.mazarineblue.keyworddriven.Instruction

org.mazarineblue.eventdriven.InvokerEvent <|-- org.mazarineblue.keyworddriven.KeywordDrivenEvent
org.mazarineblue.keyworddriven.KeywordDrivenEvent <|-- org.mazarineblue.keyworddriven.InstructionLineEvent
org.mazarineblue.keyworddriven.KeywordDrivenEvent <|-- org.mazarineblue.keyworddriven.PathEvent
org.mazarineblue.keyworddriven.InstructionLineEvent --> "1" org.mazarineblue.keyworddriven.InstructionLine
org.mazarineblue.keyworddriven.InstructionLine o-right-> "1" org.mazarineblue.keyworddriven.Path
org.mazarineblue.keyworddriven.PathEvent --> "1" org.mazarineblue.keyworddriven.Path
@enduml
