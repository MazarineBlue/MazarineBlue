@startuml
annotation org.mazarineblue.eventnotifier.EventHandler
interface org.mazarineblue.eventnotifier.Event {
    +boolean isConsumed()
}
interface org.mazarineblue.eventnotifier.EventService {
    +void publish(E event)
    +boolean subscribe(Class eventType, Filter<E> filter, Subscriber<E> subscriber)
    +boolean unsubscribe(Class eventType, Filter<E> filter, Subscriber<E> subscriber)
}
interface org.mazarineblue.eventnotifier.Filter {
    +boolean apply(E event)
}
interface org.mazarineblue.eventnotifier.Subscriber {
    +eventHandler(E event)
}
abstract class org.mazarineblue.eventnotifier.AbstractEvent
abstract org.mazarineblue.eventnotifier.ReflectionSubscriber {
    -ID id
}
class org.mazarineblue.eventnotifier.Entry {
    -Class eventType
}
class org.mazarineblue.eventnotifier.SimpleEventService {
    -Class eventType
}

org.mazarineblue.eventnotifier.Event <|-up- org.mazarineblue.eventnotifier.AbstractEvent
org.mazarineblue.eventnotifier.EventService <|-- org.mazarineblue.eventnotifier.SimpleEventService
org.mazarineblue.eventnotifier.SimpleEventService o-right-> "*" org.mazarineblue.eventnotifier.Entry
org.mazarineblue.eventnotifier.Entry o--> "1" org.mazarineblue.eventnotifier.Filter
org.mazarineblue.eventnotifier.Entry o-right-> "1" org.mazarineblue.eventnotifier.Subscriber
org.mazarineblue.eventnotifier.Subscriber <|.. org.mazarineblue.eventnotifier.ReflectionSubscriber
org.mazarineblue.eventnotifier.ReflectionSubscriber .left.> org.mazarineblue.eventnotifier.EventHandler

interface org.mazarineblue.eventdriven.Chain {
    +int countLinks()
    +void addLink(Link link)
    +void addLink(Link link, Link after)
    +void removeLink(Link link)
}
interface org.mazarineblue.eventdriven.Feed {
    +boolean hasNext()
    +Event next()
    +reset()
}
interface org.mazarineblue.eventdriven.Processor {
    +execute(Feed feed)
}
interface org.mazarineblue.eventdriven.Invoker {
    +int countLinks()
    +void addLink(Link link)
    +void addLink(Link link, Link after)
    +void removeLink(Link link)
    +void publish(Event event)
}
abstract class org.mazarineblue.eventdriven.Action {
    ~setInvoker(Invoker invoker)
    #Invoker invoker()
}
abstract org.mazarineblue.eventdriven.Link

org.mazarineblue.eventdriven.Chain <|.. org.mazarineblue.eventdriven.ChainImpl
org.mazarineblue.eventdriven.Chain <|.right. org.mazarineblue.eventdriven.Processor
org.mazarineblue.eventdriven.Processor <|.. org.mazarineblue.eventdriven.ProcessorImpl
org.mazarineblue.eventdriven.ProcessorImpl -left-> "1" org.mazarineblue.eventdriven.ChainImpl
org.mazarineblue.eventdriven.ProcessorImpl ..> org.mazarineblue.eventdriven.Feed
org.mazarineblue.eventdriven.ChainImpl ..|> org.mazarineblue.eventdriven.Invoker
org.mazarineblue.eventdriven.ChainImpl -left-> "*" org.mazarineblue.eventdriven.Link
org.mazarineblue.eventdriven.Feed ..> org.mazarineblue.eventdriven.Action
org.mazarineblue.eventdriven.Action -right-> "1" org.mazarineblue.eventdriven.Invoker
org.mazarineblue.eventnotifier.AbstractEvent <|-up- org.mazarineblue.eventdriven.Action
@enduml